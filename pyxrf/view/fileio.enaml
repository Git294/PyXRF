# ######################################################################
# Copyright (c) 2014, Brookhaven Science Associates, Brookhaven        #
# National Laboratory. All rights reserved.                            #
#                                                                      #
# Redistribution and use in source and binary forms, with or without   #
# modification, are permitted provided that the following conditions   #
# are met:                                                             #
#                                                                      #
# * Redistributions of source code must retain the above copyright     #
#   notice, this list of conditions and the following disclaimer.      #
#                                                                      #
# * Redistributions in binary form must reproduce the above copyright  #
#   notice this list of conditions and the following disclaimer in     #
#   the documentation and/or other materials provided with the         #
#   distribution.                                                      #
#                                                                      #
# * Neither the name of the Brookhaven Science Associates, Brookhaven  #
#   National Laboratory nor the names of its contributors may be used  #
#   to endorse or promote products derived from this software without  #
#   specific prior written permission.                                 #
#                                                                      #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  #
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    #
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    #
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE       #
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,           #
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES   #
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR   #
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)   #
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  #
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OTHERWISE) ARISING   #
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   #
# POSSIBILITY OF SUCH DAMAGE.                                          #
########################################################################

__author__ = 'Li Li'

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, CheckBox, ComboBox, RadioButton,
                               ScrollArea, Window, GroupBox)
from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, spacer, grid
from enaml.core.api import Include, Looper
from enaml.layout.geometry import Box
from enaml.stdlib.fields import FloatField
from enaml.stdlib.fields import IntField as DefaultIntField

import numpy as np

enamldef IntField(DefaultIntField):
    submit_triggers = ['auto_sync'] #['return_pressed']


enamldef FileView(DockItem): file_view:
    attr io_model
    attr param_model
    attr plot_model
    #attr img_model_adv
    #attr fit_model
    #attr setting_model

    Container:
        Container:
            constraints = [
                vbox(
                    hbox(folder_btn, folder_fd),
                    hbox(btn_out, fd_out),
                    hbox(files_btn, files_load),
                    #hbox(pixel_h_label, pixel_h, pixel_v_label, pixel_v, spacer),
                    #hbox(cb_runid, run_lbl, run_num, load_btn, spacer),
                    hbox(gb_db),
                    hbox(gb_fit),
                    scroller,
                    hbox(plot_bt, spacer),
                ),
                folder_btn.width == files_btn.width,
                folder_btn.width == btn_out.width,
            ]
            PushButton: folder_btn:
                text = "Working Directory"
                clicked ::
                    path = FileDialogEx.get_existing_directory(file_view)
                    if path:
                        io_model.working_directory = path
            Field: folder_fd:
                text := io_model.working_directory

            PushButton: btn_out:
                text = 'Save Results to'
                clicked ::
                    path = FileDialogEx.get_existing_directory(file_view)
                    if path:
                        io_model.output_directory = path
                        fd_out.text = path
            Field: fd_out:
                text << io_model.output_directory

            PushButton: files_btn:
                text = "Exp. Data Files"
                clicked ::
                    path = FileDialogEx.get_open_file_names(file_view, current_path=io_model.working_directory)
                    if path:

                        # only load one file
                        io_model.file_names = [item.split('/')[-1] for item in path][0:1]

                        #files_load.text = 'Number of files loaded: {}'.format(len(io_model.file_names))
                        files_load.text = '{} is loaded.'.format(io_model.file_name)

                        # do not import original data for 2D image
                        #img_model_adv.data_dict = io_model.img_dict

                        # data passed for auto fitting and final fit
                        #param_model.data_sets = io_model.data_sets

                        plot_model.parameters = param_model.param_new
                        #setting_model.parameters = param_model.param_new
                        #setting_model.data_sets = io_model.data_sets
                        #fit_model.save_name = io_model.file_names[0]

            Label: files_load:
                text = 'No data is loaded.'

            GroupBox: gb_db:
                title = 'Data from database'
                constraints = [vbox(
                                    hbox(pixel_h_label, pixel_h, pixel_v_label, pixel_v, spacer),
                                    hbox(run_lbl, run_num, load_btn, spacer),
                                   )]
                Label : pixel_h_label:
                    text = 'pixel num on x (horizontal)'
                IntField: pixel_h:
                    value := io_model.h_num
                    maximum_size = (40, 20)
                Label : pixel_v_label:
                    text = 'pixel num on y (vertical)'
                IntField: pixel_v:
                    value := io_model.v_num
                    maximum_size = (40, 20)

                #CheckBox: cb_runid:
                #    text = ' '
                #    checked = True
                #    clicked ::
                #        if checked:
                #            run_lbl.enabled = True
                #            run_num.enabled = True
                #            load_btn.enabled = True
                #        else:
                #            run_lbl.enabled = False
                #            run_num.enabled = False
                #            load_btn.enabled = False

                Label: run_lbl:
                    text = 'Run # '

                IntField: run_num:
                    value := io_model.runid

                PushButton: load_btn:
                    text = "Load Data from Database"
                    clicked ::
                        io_model.load_data_runid()

                        files_load.text = 'Number of files loaded: {}'.format(len(io_model.file_names))

                        # do not import original data for 2D image
                        #img_model_adv.data_dict = io_model.img_dict

                        # data passed for auto fitting and final fit
                        #param_model.data_sets = io_model.data_sets

                        plot_model.parameters = param_model.param_new
                        #setting_model.parameters = param_model.param_new
                        #setting_model.data_sets = io_model.data_sets
                        #fit_model.save_name = io_model.file_names[0]

            GroupBox: gb_fit:
                constraints = [hbox(fit_lbl, cb_select, spacer)]
                Label : fit_lbl:
                    text = 'Which channel data for fitting'
                ComboBox: cb_select:
                    items << ['Select Data '] + list(io_model.file_channel_list)
                    index = 0
                    index >> io_model.file_opt
                    minimum_size = (200, 16)
                    index ::
                        if index > 0:
                            pass
                            # assign data to plot model
                            #plot_model.data = io_model.data

                            # for param model
                            #param_model.data = io_model.data

                            # for fit model
                            #fit_model.data = io_model.data
                            #fit_model.data_all = io_model.data_all

            ScrollArea: scroller:
                Container:
                    Looper: looper:
                        iterable << io_model.file_channel_list
                        GroupBox:
                            title = '{}, data shape: {}'.format(loop_item, io_model.data_sets[loop_item].raw_data.shape)
                            #title_align = 'center'
                            #constraints = [hbox(cb, lb1, fd1, lb2, fd2, spacer)]
                            constraints = [hbox(rb_1, rb_2, rb_3, rb_4, lb1, fd1, lb2, fd2, spacer)]
                            padding = Box(0, 0, 0, 0)

                            RadioButton: rb_1:
                                text = 'None'
                                checked = True
                                clicked ::
                                    io_model.data_sets[loop_item].plot_index = 0
                            RadioButton: rb_2:
                                text = 'Sum'
                                clicked ::
                                    io_model.data_sets[loop_item].plot_index = 1
                                    fd1.enabled = False
                                    fd2.enabled = False
                                    plot_bt.enabled = True
                                    #plot_model.data_sets = io_model.data_sets

                            RadioButton: rb_3:
                                text = 'Point'
                                clicked ::
                                    io_model.data_sets[loop_item].plot_index = 2
                                    fd1.enabled = True
                                    fd2.enabled = False
                                    plot_bt.enabled = True
                                    #plot_model.data_sets = io_model.data_sets

                            RadioButton: rb_4:
                                text = 'ROI'
                                clicked ::
                                    io_model.data_sets[loop_item].plot_index = 3
                                    fd1.enabled = True
                                    fd2.enabled = True
                                    plot_bt.enabled = True
                                    #plot_model.data_sets = io_model.data_sets

                            Label: lb1:
                                text = 'Start'
                                minimum_size = (40, 10)
                                #maximum_size = 50
                            Field: fd1:
                                text := io_model.data_sets[loop_item].point1
                                maximum_size = 80
                                enabled = False
                                #plot_model.data_sets = io_model.data_sets

                            Label: lb2:
                                text = 'End'
                                minimum_size = (40, 10)
                                #maximum_size = 50
                            Field: fd2:
                                text := io_model.data_sets[loop_item].point2
                                maximum_size = 80
                                enabled = False
                                #plot_model.data_sets = io_model.data_sets

            PushButton: plot_bt:
                text = 'Plot Experiments'
                #maximum_size = 100
                enabled = False
                checkable = True
                clicked ::
                    plot_model.data_sets = io_model.data_sets
                    plot_model.plot_multi_exp_data()
                    if checked:
                        plot_bt.text = 'Remove Plot'
                        plot_model.show_exp_opt = True
                    else:
                        plot_model.show_exp_opt = False
                        plot_bt.text = 'Plot Experiments'
