# ######################################################################
# Copyright (c) 2014, Brookhaven Science Associates, Brookhaven        #
# National Laboratory. All rights reserved.                            #
#                                                                      #
# Redistribution and use in source and binary forms, with or without   #
# modification, are permitted provided that the following conditions   #
# are met:                                                             #
#                                                                      #
# * Redistributions of source code must retain the above copyright     #
#   notice, this list of conditions and the following disclaimer.      #
#                                                                      #
# * Redistributions in binary form must reproduce the above copyright  #
#   notice this list of conditions and the following disclaimer in     #
#   the documentation and/or other materials provided with the         #
#   distribution.                                                      #
#                                                                      #
# * Neither the name of the Brookhaven Science Associates, Brookhaven  #
#   National Laboratory nor the names of its contributors may be used  #
#   to endorse or promote products derived from this software without  #
#   specific prior written permission.                                 #
#                                                                      #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  #
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    #
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    #
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE       #
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,           #
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES   #
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR   #
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)   #
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  #
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OTHERWISE) ARISING   #
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   #
# POSSIBILITY OF SUCH DAMAGE.                                          #
########################################################################
from __future__ import absolute_import
__author__ = 'Li Li'

from enaml.widgets.api import (Container, PushButton, Label,
                               Form, Field, FileDialogEx, DockItem,
                               DockArea, CheckBox, ComboBox, RadioButton,
                               ScrollArea, Window, GroupBox)
from enaml.layout.api import hbox, vbox, HSplitLayout, VSplitLayout, spacer, grid
from enaml.core.api import Include, Looper
from enaml.layout.geometry import Box
from enaml.stdlib.fields import FloatField
from enaml.stdlib.fields import IntField as DefaultIntField

import numpy as np

try:
    import databroker
except (ImportError, KeyError):
    databroker = None

enamldef IntField(DefaultIntField):
    submit_triggers = ['auto_sync'] #['return_pressed']


enamldef FileView(DockItem): file_view:
    attr io_model
    attr param_model
    attr plot_model
    #attr img_model_adv
    attr fit_model
    attr setting_model

    Container:
        Container:
            constraints = [
                vbox(
                    hbox(folder_btn, spacer),
                    hbox(folder_fd),
                    hbox(cb_each, spacer),
                    hbox(files_btn, files_load, spacer),
                    hbox(mask_btn, mask_load_note, mask_cb),
                    #hbox(pixel_h_label, pixel_h, pixel_v_label, pixel_v, spacer),
                    #hbox(cb_runid, run_lbl, run_num, load_btn, spacer),
                    hbox(gb_db),
                    hbox(gb_fit),
                    scroller,
                    hbox(plot_bt, spacer),
                ),
                folder_btn.width == files_btn.width,
                folder_btn.width == mask_btn.width,
                files_btn.height == files_load.height,
                mask_btn.height == mask_load_note.height,
            ]
            PushButton: folder_btn:
                text = "Working Directory"
                clicked ::
                    path = FileDialogEx.get_existing_directory(file_view)
                    if path:
                        io_model.working_directory = path
            Field: folder_fd:
                text := io_model.working_directory
                #maximum_size = 400

            CheckBox: cb_each:
                text = 'Load data from each channel'
                checkable = True
                checked := io_model.load_each_channel
            PushButton: files_btn:
                text = "Load Data File"
                clicked ::
                    path = FileDialogEx.get_open_file_names(file_view, current_path=io_model.working_directory)
                    if path:
                        # only load one file
                        # 'temp' is used to reload the same file, otherwise file_name will not update
                        io_model.file_name = 'temp'
                        io_model.file_name = [item.split('/')[-1] for item in path][0:1][0]
                        files_load.text = '{} is loaded.'.format(io_model.file_name)

                        plot_model.parameters = param_model.param_new
                        setting_model.parameters = param_model.param_new
                        setting_model.data_sets = io_model.data_sets
                        fit_model.data_sets = io_model.data_sets
                        fit_model.fit_img = {} # clear dict in fitmodel to rm old results

            Label: files_load:
                text = 'No data is loaded.'

            PushButton: mask_btn:
                text = "Load Mask File"
                clicked ::
                    path = FileDialogEx.get_open_file_names(file_view, current_path=io_model.working_directory)
                    if path:
                        io_model.mask_name = [item.split('/')[-1] for item in path][0]
                        mask_load_note.text = [item.split('/')[-1] for item in path][0]
            Label: mask_load_note:
                text = 'No data is loaded.'
            CheckBox: mask_cb:
                text = 'Apply Mask'
                checkable = True
                checked := io_model.mask_opt
            GroupBox: gb_db:
                title = 'Data from database'
                constraints = [hbox(run_lbl, run_num, load_btn, spacer),]
                Label: run_lbl:
                    text = 'Run # '

                IntField: run_num:
                    value := io_model.runid

                PushButton: load_btn:
                    enabled = databroker is not None
                    text = "Load Data from Database"
                    clicked ::
                        io_model.load_data_runid()

                        files_load.text = 'Number of files loaded: {}'.format(len(io_model.file_names))

                        # do not import original data for 2D image
                        #img_model_adv.data_dict = io_model.img_dict

                        # data passed for auto fitting and final fit
                        #param_model.data_sets = io_model.data_sets

                        plot_model.parameters = param_model.param_new
                        #setting_model.parameters = param_model.param_new
                        #setting_model.data_sets = io_model.data_sets
                        #fit_model.save_name = io_model.file_names[0]

            GroupBox: gb_fit:
                constraints = [hbox(fit_lbl, cb_select, spacer)]
                Label : fit_lbl:
                    text = 'Which channel data for fitting'
                    foreground = 'blue'
                ComboBox: cb_select:
                    items << ['Select Data '] + list(io_model.file_channel_list)
                    index = 0
                    index >> io_model.file_opt
                    minimum_size = (300, 16)
                    foreground = 'blue'

            ScrollArea: scroller:
                Container:
                    Looper: looper:
                        iterable << io_model.file_channel_list
                        GroupBox:
                            title = '{}, data shape: {}, total counts: {}'.format(loop_item, io_model.data_sets[loop_item].raw_data.shape, int(np.sum(io_model.data_sets[loop_item].raw_data)))
                            #title_align = 'center'
                            #constraints = [hbox(cb, lb1, fd1, lb2, fd2, spacer)]
                            constraints = [hbox(rb_1, rb_2, rb_3, rb_4, lb1, fd1, lb2, fd2, spacer)]
                            padding = Box(0, 0, 0, 0)

                            RadioButton: rb_1:
                                text = 'None'
                                checked = True
                                clicked ::
                                    io_model.data_sets[loop_item].plot_index = 0
                            RadioButton: rb_2:
                                text = 'Sum'
                                clicked ::
                                    io_model.data_sets[loop_item].plot_index = 1
                                    fd1.enabled = False
                                    fd2.enabled = False
                                    #plot_bt.enabled = True
                                    #plot_model.data_sets = io_model.data_sets

                            RadioButton: rb_3:
                                text = 'Point'
                                clicked ::
                                    io_model.data_sets[loop_item].plot_index = 2
                                    fd1.enabled = True
                                    fd2.enabled = False
                                    #plot_bt.enabled = True
                                    #plot_model.data_sets = io_model.data_sets

                            RadioButton: rb_4:
                                text = 'ROI'
                                clicked ::
                                    io_model.data_sets[loop_item].plot_index = 3
                                    fd1.enabled = True
                                    fd2.enabled = True
                                    #plot_bt.enabled = True
                                    #plot_model.data_sets = io_model.data_sets

                            Label: lb1:
                                text = 'Start'
                                minimum_size = (30, 10)
                                #maximum_size = 50
                            Field: fd1:
                                text := io_model.data_sets[loop_item].point1
                                maximum_size = 40
                                enabled = False
                                #plot_model.data_sets = io_model.data_sets

                            Label: lb2:
                                text = 'End'
                                minimum_size = (30, 10)
                                #maximum_size = 50
                            Field: fd2:
                                text := io_model.data_sets[loop_item].point2
                                maximum_size = 40
                                enabled = False
                                #plot_model.data_sets = io_model.data_sets

            PushButton: plot_bt:
                text = 'Plot Experiments'
                #maximum_size = 100
                enabled = True
                checkable = True
                checked << plot_model.show_exp_opt
                clicked ::
                    plot_model.data_sets = io_model.data_sets
                    plot_model.plot_multi_exp_data()
                    if checked:
                        plot_bt.text = 'Remove Plot'
                        plot_model.show_exp_opt = True
                    else:
                        plot_model.show_exp_opt = False
                        plot_bt.text = 'Plot Experiments'
